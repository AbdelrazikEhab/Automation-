import { QuoteSession } from "./Client";
export interface TickerModel {
    seriesKey: string;
    baseName: string;
    symbol: string;
    symbolFullname: string;
    feedTicker: string;
    exchangeListedSymbol: string;
    sessionId: string;
    sessionRegularDisplay: string;
    sessionExtendedDisplay: string;
    sessionExtended: string;
    sessionDisplay: string;
    sessionRegular: string;
    subsessions: object;
    subsessionId: string;
    group: string;
    perms: object;
    marketStatus: {
        phase: string;
        tradingday: string;
    };
    internalStudyId: string;
    internalStudyInputs: object;
    exchange: string;
    exchangeTraded: string;
    listedExchange: string;
    providerId: string;
    description: string;
    shortDescription: string;
    type: string;
    currencyCode: string;
    currencyId: string;
    baseCurrency: string;
    baseCurrencyId: string;
    symbolPrimaryName: string;
    symbolProname: string;
    proName: string;
    shortName: string;
    originalName: string;
    maxPrecision: number;
    isTradable: boolean;
    hasDepth: boolean;
    fundamentalData: boolean;
    fractional: boolean;
    popularityRank: number;
    proPerm: string;
    variableTickSize: string;
    historyTag: string;
    rtLag: string;
    rtUpdateTime: string;
    timezone: string;
    currentSession: string;
    feedHasIntraday: boolean;
    hasIntraday: boolean;
    isReplayable: boolean;
    hasPriceSnapshot: boolean;
    feed: string;
    feedHasDwm: boolean;
    hasNoBbo: boolean;
    hasNoVolume: boolean;
    hasDwm: boolean;
    localPopularity: object;
    localPopularityRank: object;
    visiblePlotsSet: string;
    prefixes: Array<string>;
    brokerNames: object;
    currencyLogoId: string;
    baseCurrencyLogoId: string;
    volumeType: string;
    typespecs: Array<string>;
}
export declare class TickerDetails {
    readonly pair: string;
    private readonly $adapter;
    private readonly $eventBus;
    private $tickerData;
    constructor(quoteSessionBridge: QuoteSession, ticker: string, market: string);
    ready(callback: (tickerModel: TickerModel) => void): void;
    protected get renderTickerModel(): TickerModel;
    private sessionStreamHandler;
}
